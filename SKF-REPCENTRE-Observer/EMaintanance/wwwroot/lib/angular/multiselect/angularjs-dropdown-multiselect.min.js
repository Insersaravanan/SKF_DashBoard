"use strict"; var directiveModule = angular.module("angularjs-dropdown-multiselect", []); function contains(e, t) { var n = !1; return e.some(function (e) { if (e === t) return n = !0, !0 }), n } function find(e, t) { var n; return e.some(function (e) { var l = !0; if (Object.keys(t).forEach(function (n) { e[n] !== t[n] && (l = !1) }), l) return n = e, !0 }), n } function findIndex(e, t) { var n = -1, l = -1; return e.some(function (e) { var o = !0; if (l += 1, Object.keys(t).forEach(function (n) { e[n] !== t[n] && (o = !1) }), o) return n = l, !0 }), n } directiveModule.directive("mfDropdownStaticInclude", ["$compile", function (e) { return function (t, n, l) { var o = l.mfDropdownStaticInclude, s = n.html(o).contents(); e(s)(t) } }]), directiveModule.directive("ngDropdownMultiselect", ["$filter", "$document", "$compile", "$parse", function (e, t, n, l) { return { restrict: "AE", scope: { selectedModel: "=", options: "=", extraSettings: "=", events: "=", searchFilter: "=?", translationTexts: "=", groupBy: "@", disabled: "=" }, template: function (e, t) { var n = !!t.checkboxes, l = '<div class="multiselect-parent btn-group dropdown-multiselect" ng-class="{open: open}">'; l += '<button ng-disabled="disabled" type="button" class="dropdown-toggle" ng-class="settings.buttonClasses" ng-click="toggleDropdown()">{{getButtonText()}}&nbsp;<span class="caret"></span></button>', l += "<ul class=\"dropdown-menu dropdown-menu-form\" ng-if=\"open\" ng-style=\"{display: open ? 'block' : 'none', height : settings.scrollable ? settings.scrollableHeight : 'auto', overflow: 'auto' }\" >", l += '<li ng-if="settings.showCheckAll && settings.selectionLimit !== 1"><a ng-keydown="keyDownLink($event)" data-ng-click="selectAll()" tabindex="-1" id="selectAll"><span class="glyphicon glyphicon-ok"></span>  {{texts.checkAll}}</a>', l += '<li ng-if="settings.showUncheckAll"><a ng-keydown="keyDownLink($event)" data-ng-click="deselectAll();" tabindex="-1" id="deselectAll"><span class="glyphicon glyphicon-remove"></span>   {{texts.uncheckAll}}</a></li>', l += '<li ng-if="settings.selectByGroups && ((settings.showCheckAll && settings.selectionLimit > 0) || settings.showUncheckAll)" class="divider"></li>', l += '<li ng-if="settings.selectByGroups && ((settings.showCheckAll && settings.selectionLimit > 0) || settings.showUncheckAll)" class="divider"></li>', l += '<li ng-repeat="currentGroup in settings.selectByGroups track by $index" ng-click="selectCurrentGroup(currentGroup)"><a ng-class="{\'dropdown-selected-group\': selectedGroup === currentGroup}" tabindex="-1">{{::texts.selectGroup}} {{::getGroupLabel(currentGroup)}}</a></li>', l += '<li ng-if="settings.selectByGroups && settings.showEnableSearchButton" class="divider"></li>', l += '<li ng-if="settings.showEnableSearchButton && settings.enableSearch"><a ng-keydown="keyDownLink($event); keyDownToggleSearch();" ng-click="toggleSearch($event);" tabindex="-1">{{texts.disableSearch}}</a></li>', l += '<li ng-if="settings.showEnableSearchButton && !settings.enableSearch"><a ng-keydown="keyDownLink($event); keyDownToggleSearch();" ng-click="toggleSearch($event);" tabindex="-1">{{texts.enableSearch}}</a></li>', l += '<li ng-if="(settings.showCheckAll && settings.selectionLimit > 0) || settings.showUncheckAll || settings.showEnableSearchButton" class="divider"></li>', l += '<li ng-if="settings.enableSearch"><div class="dropdown-header"><input type="text" class="form-control searchField" ng-keydown="keyDownSearchDefault($event); keyDownSearch($event, input.searchFilter);" ng-style="{width: \'100%\'}" ng-model="input.searchFilter" placeholder="{{texts.searchPlaceholder}}" /></li>', l += '<li ng-if="settings.enableSearch" class="divider"></li>', !!t.groupBy ? (l += '<li ng-repeat-start="option in orderedItems | filter:getFilter(input.searchFilter)" ng-show="getPropertyForObject(option, settings.groupBy) !== getPropertyForObject(orderedItems[$index - 1], settings.groupBy)" role="presentation" class="dropdown-header">{{ getGroupLabel(getPropertyForObject(option, settings.groupBy)) }}</li>', l += '<li ng-class="{\'active\': isChecked(getPropertyForObject(option,settings.idProp)) && settings.styleActive}" ng-repeat-end role="presentation">') : l += '<li ng-class="{\'active\': isChecked(getPropertyForObject(option,settings.idProp)) && settings.styleActive}" role="presentation" ng-repeat="option in options | filter:getFilter(input.searchFilter)">', l += '<a ng-keydown="option.disabled || keyDownLink($event)" role="menuitem" class="option" tabindex="-1" ng-click="option.disabled || setSelectedItem(getPropertyForObject(option,settings.idProp), false, true)" ng-disabled="option.disabled">', l += n ? '<div class="checkbox"><label><input class="checkboxInput" type="checkbox" ng-click="checkboxClick($event, getPropertyForObject(option,settings.idProp))" ng-checked="isChecked(getPropertyForObject(option,settings.idProp))" /> <span mf-dropdown-static-include="{{settings.template}}"></div></label></span></a>' : '<span data-ng-class="{\'glyphicon glyphicon-ok\': isChecked(getPropertyForObject(option,settings.idProp))}"> </span> <span mf-dropdown-static-include="{{settings.template}}"></span></a>', l += "</li>", l += '<li class="divider" ng-show="settings.selectionLimit > 1"></li>', l += '<li role="presentation" ng-show="settings.selectionLimit > 1"><a role="menuitem">{{selectedModel.length}} {{texts.selectionOf}} {{settings.selectionLimit}} {{texts.selectionCount}}</a></li>', l += "</ul>", l += "</div>", e.html(l) }, link: function (n, l, o) { var s = l.children()[0]; function i(e) { var t = {}; return "" === n.settings.externalIdProp ? t[n.settings.idProp] = e : t[n.settings.externalIdProp] = e, t } function r(e) { for (var t in e) delete e[t] } n.toggleDropdown = function () { n.open ? n.close() : n.open = !0, n.settings.keyboardControls && n.open && (1 === n.settings.selectionLimit && n.settings.enableSearch ? setTimeout(function () { angular.element(l)[0].querySelector(".searchField").focus() }, 0) : setTimeout(function () { angular.element(l)[0].querySelector(".option").focus() }, 0)) }, n.checkboxClick = function (e, t) { n.setSelectedItem(t, !1, !0), e.stopImmediatePropagation() }, n.externalEvents = { onItemSelect: angular.noop, onItemDeselect: angular.noop, onSelectAll: angular.noop, onDeselectAll: angular.noop, onInitDone: angular.noop, onMaxSelectionReached: angular.noop, onSelectionChanged: angular.noop, onClose: angular.noop }, n.settings = { dynamicTitle: !0, scrollable: !1, scrollableHeight: "300px", closeOnBlur: !0, displayProp: "label", idProp: "id", externalIdProp: "id", enableSearch: !1, selectionLimit: 0, showCheckAll: !0, showUncheckAll: !0, showEnableSearchButton: !1, closeOnSelect: !1, buttonClasses: "btn btn-default", closeOnDeselect: !1, groupBy: o.groupBy || void 0, groupByTextProvider: null, smartButtonMaxItems: 0, smartButtonTextConverter: angular.noop, styleActive: !1, keyboardControls: !1, template: "{{getPropertyForObject(option, settings.displayProp)}}", searchField: "$" }, n.texts = { checkAll: "Check All", uncheckAll: "Uncheck All", selectionCount: "checked", selectionOf: "/", searchPlaceholder: "Search...", buttonDefaultText: "Select", dynamicButtonTextSuffix: "selected", disableSearch: "Disable search", enableSearch: "Enable search", selectGroup: "Select all:" }, n.input = { searchFilter: n.searchFilter || "" }, angular.isDefined(n.settings.groupBy) && n.$watch("options", function (t) { angular.isDefined(t) && (n.orderedItems = e("orderBy")(t, n.settings.groupBy)) }), n.$watch("selectedModel", function (e) { Array.isArray(e) ? n.singleSelection = !1 : n.singleSelection = !0 }), n.close = function () { n.open = !1, n.externalEvents.onClose() }, n.selectCurrentGroup = function (e) { n.selectedModel.splice(0, n.selectedModel.length), n.orderedItems && n.orderedItems.forEach(function (t) { t[n.groupBy] === e && n.setSelectedItem(n.getPropertyForObject(t, n.settings.idProp), !1, !1) }), n.externalEvents.onSelectionChanged() }, angular.extend(n.settings, n.extraSettings || []), angular.extend(n.externalEvents, n.events || []), angular.extend(n.texts, n.translationTexts), n.singleSelection = 1 === n.settings.selectionLimit, n.singleSelection && angular.isArray(n.selectedModel) && 0 === n.selectedModel.length && r(n.selectedModel), n.settings.closeOnBlur && t.on("click", function (e) { if (n.open) { for (var t = e.target.parentElement, l = !1; angular.isDefined(t) && null !== t && !l;)t.className.split && contains(t.className.split(" "), "multiselect-parent") && !l && t === s && (l = !0), t = t.parentElement; l || n.$apply(function () { n.close() }) } }), n.getGroupLabel = function (e) { return null !== n.settings.groupByTextProvider ? n.settings.groupByTextProvider(e) : e }, n.getButtonText = function () { if (n.settings.dynamicTitle && (n.selectedModel.length > 0 || angular.isObject(n.selectedModel) && Object.keys(n.selectedModel).length > 0)) { if (n.settings.smartButtonMaxItems > 0) { var e = []; return angular.forEach(n.options, function (t) { if (n.isChecked(n.getPropertyForObject(t, n.settings.idProp))) { var l = n.getPropertyForObject(t, n.settings.displayProp), o = n.settings.smartButtonTextConverter(l, t); e.push(o || l) } }), n.selectedModel.length > n.settings.smartButtonMaxItems && (e = e.slice(0, n.settings.smartButtonMaxItems)).push("..."), e.join(", ") } var t; return 0 === (t = n.singleSelection ? null !== n.selectedModel && angular.isDefined(n.selectedModel[n.settings.idProp]) ? 1 : 0 : angular.isDefined(n.selectedModel) ? n.selectedModel.length : 0) ? n.texts.buttonDefaultText : t + " " + n.texts.dynamicButtonTextSuffix } return n.texts.buttonDefaultText }, n.getPropertyForObject = function (e, t) { if (angular.isDefined(e) && e.hasOwnProperty(t)) return e[t] }, n.selectAll = function () { var t; n.deselectAll(!0), n.externalEvents.onSelectAll(), t = e("filter")(n.options, n.getFilter(n.input.searchFilter)), angular.forEach(t, function (e) { n.setSelectedItem(e[n.settings.idProp], !0, !1) }), n.externalEvents.onSelectionChanged(), n.selectedGroup = null }, n.deselectAll = function (e) { (e = e || !1) || n.externalEvents.onDeselectAll(), n.singleSelection ? r(n.selectedModel) : n.selectedModel.splice(0, n.selectedModel.length), e || n.externalEvents.onSelectionChanged(), n.selectedGroup = null }, n.setSelectedItem = function (e, t, l) { var o = i(e), s = null; if (s = "" === n.settings.externalIdProp ? find(n.options, o) : o, n.singleSelection) r(n.selectedModel), angular.extend(n.selectedModel, s), l && n.externalEvents.onItemSelect(s), (n.settings.closeOnSelect || n.settings.closeOnDeselect) && n.close(); else { t = t || !1; var c = -1 !== findIndex(n.selectedModel, o); !t && c ? (n.selectedModel.splice(findIndex(n.selectedModel, o), 1), n.externalEvents.onItemDeselect(o), n.settings.closeOnDeselect && n.close()) : !c && (0 === n.settings.selectionLimit || n.selectedModel.length < n.settings.selectionLimit) && (n.selectedModel.push(s), l && n.externalEvents.onItemSelect(s), n.settings.closeOnSelect && n.close(), n.settings.selectionLimit > 0 && n.selectedModel.length === n.settings.selectionLimit && n.externalEvents.onMaxSelectionReached()) } l && n.externalEvents.onSelectionChanged(), n.selectedGroup = null }, n.isChecked = function (e) { return n.singleSelection ? null !== n.selectedModel && angular.isDefined(n.selectedModel[n.settings.externalIdProp]) && n.selectedModel[n.settings.externalIdProp] === i(e)[n.settings.externalIdProp] : -1 !== findIndex(n.selectedModel, i(e)) }, n.externalEvents.onInitDone(), n.keyDownLink = function (e) { var t, l = angular.element(e.target).scope(), o = e.target.parentNode; if (n.settings.keyboardControls) if (13 === e.keyCode || 32 === e.keyCode) e.preventDefault(), l.option ? n.setSelectedItem(n.getPropertyForObject(l.option, n.settings.idProp), !1, !0) : "deselectAll" === e.target.id ? n.deselectAll() : "selectAll" === e.target.id && n.selectAll(); else if (38 === e.keyCode) { for (e.preventDefault(), o.previousElementSibling && (t = o.previousElementSibling.querySelector("a") || o.previousElementSibling.querySelector("input")); !t && o;)(o = o.previousElementSibling) && (t = o.querySelector("a") || o.querySelector("input")); t && t.focus() } else if (40 === e.keyCode) { for (e.preventDefault(), o.nextElementSibling && (t = o.nextElementSibling.querySelector("a") || o.nextElementSibling.querySelector("input")); !t && o;)(o = o.nextElementSibling) && (t = o.querySelector("a") || o.querySelector("input")); t && t.focus() } else 27 === e.keyCode && (e.preventDefault(), n.toggleDropdown()) }, n.keyDownSearchDefault = function (e) { var t, o = e.target.parentNode.parentNode; if (n.settings.keyboardControls) if (9 === e.keyCode || 40 === e.keyCode) e.preventDefault(), setTimeout(function () { angular.element(l)[0].querySelector(".option").focus() }, 0); else if (38 === e.keyCode) { for (e.preventDefault(), o.previousElementSibling && (t = o.previousElementSibling.querySelector("a") || o.previousElementSibling.querySelector("input")); !t && o;)(o = o.previousElementSibling) && (t = o.querySelector("a") || o.querySelector("input")); t && t.focus() } else 27 === e.keyCode && (e.preventDefault(), n.toggleDropdown()) }, n.keyDownSearch = function (t, l) { var o; n.settings.keyboardControls && 13 === t.keyCode && (1 === n.settings.selectionLimit && n.settings.enableSearch ? 1 === (o = e("filter")(n.options, n.getFilter(l))).length && n.setSelectedItem(n.getPropertyForObject(o[0], n.settings.idProp), !1, !0) : n.settings.enableSearch && n.selectAll()) }, n.getFilter = function (e) { var t = {}; return t[n.settings.searchField] = e, t }, n.toggleSearch = function (e) { e && e.stopPropagation(), n.settings.enableSearch = !n.settings.enableSearch, n.settings.enableSearch || (n.input.searchFilter = "") }, n.keyDownToggleSearch = function () { n.settings.keyboardControls && 13 === event.keyCode && (n.toggleSearch(), n.settings.enableSearch ? setTimeout(function () { angular.element(l)[0].querySelector(".searchField").focus() }, 0) : angular.element(l)[0].querySelector(".option").focus()) } } } }]);